#include <bits/stdc++.h>
using namespace std;

// Typedefs for convenience
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

// Constants
const int MOD = 1e9 + 7;
const ll INF = 1e18;

// Fast I/O
#define FAST_IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)

// Macros for common operations
#define all(x) (x).begin(), (x).end()
#define pb push_back
#define mp make_pair
#define F first
#define S second
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define RFOR(i, a, b) for (int i = a; i >= b; --i)

// Debugging macro
#ifdef LOCAL
    #define debug(x) cerr << #x << " = " << x << endl
#else
    #define debug(x)
#endif

// Modular arithmetic helper functions
ll modExp(ll base, ll exp, ll mod) {
    ll res = 1;
    while (exp > 0) {
        if (exp % 2 == 1) res = (res * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return res;
}


int main() {
    FAST_IO;  
    
    ll t;
    cin >> t;  
    while (t--) {
        ll a,b,x1,y1,x2,y2;
        cin>>a>>b;
        cin>>x1>>y1;
        cin>>x2>>y2;

        //direction vector for each cell knight can be present
        vector<ll>dx={-a,-a,a,a,b,-b,b,-b};
        vector<ll>dy={-b,b,b,-b,a,a,-a,-a};


        set<pair<ll,ll>>dk,dq;

        for(ll i=0; i<8; i++)
        {
            dk.insert(make_pair(x1+dx[i],y1+dy[i]));
        }

        for(ll i=0;i<8; i++)
        {
            dq.insert(make_pair(x2+dx[i],y2+dy[i]));
        }

        ll count=0;

        for(const auto &e: dk)
        {
            if(dq.find(e)!=dq.end())
            {
                count++;
            }
        }

        cout<<count<<endl;
    }
    

}
